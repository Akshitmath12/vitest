// Test generated by RoostGPT for test ReactStoryBook using AI Type Open AI and AI Model gpt-4

const { handleRequest, resolveMainClient, getResponse } = require('./mockServiceWorker');

jest.mock('./mockServiceWorker');

describe('handleRequest', () => {
  let event;
  let requestId;
  let client;
  let response;

  beforeEach(() => {
    event = {};
    requestId = '123';
    client = { id: 'abc' };
    response = {
      clone: jest.fn().mockImplementation(() => ({
        type: 'default',
        ok: true,
        status: 200,
        statusText: 'OK',
        body: 'response body',
        headers: new Headers(),
        redirected: false
      })),
      text: jest.fn().mockResolvedValue('response body')
    };
  });

  test('should handle request successfully', async () => {
    resolveMainClient.mockResolvedValue(client);
    getResponse.mockResolvedValue(response);

    const actualResponse = await handleRequest(event, requestId);

    expect(actualResponse).toEqual(response);
    expect(response.clone).toHaveBeenCalled();
  });

  test('should handle request when client is not found', async () => {
    resolveMainClient.mockResolvedValue(null);

    const actualResponse = await handleRequest(event, requestId);

    expect(actualResponse).toEqual(response);
    expect(response.clone).not.toHaveBeenCalled();
  });

  test('should handle request when response is not found', async () => {
    getResponse.mockResolvedValue(null);

    const actualResponse = await handleRequest(event, requestId);

    expect(actualResponse).toBeNull();
  });
});
