// Test generated by RoostGPT for test ReactStoryBook using AI Type Open AI and AI Model gpt-4

const { resolveMainClient } = require('./mockServiceWorker');

describe('resolveMainClient', () => {
  let event;
  let client;
  let allClients;
  let activeClientIds;
  let self;

  beforeEach(() => {
    client = { frameType: 'top-level' };
    allClients = [{ id: '1', visibilityState: 'visible' }, { id: '2', visibilityState: 'hidden' }];
    activeClientIds = new Set(['1']);
    event = { clientId: '1' };
    self = {
      clients: {
        get: jest.fn().mockResolvedValue(client),
        matchAll: jest.fn().mockResolvedValue(allClients),
      },
    };
    global.self = self;
  });

  test('should return top-level client', async () => {
    const result = await resolveMainClient(event);
    expect(result).toBe(client);
    expect(self.clients.get).toHaveBeenCalledWith(event.clientId);
  });

  test('should return visible client registered by worker', async () => {
    client.frameType = 'nested';
    const result = await resolveMainClient(event);
    expect(result).toBe(allClients[0]);
    expect(self.clients.matchAll).toHaveBeenCalledWith({ type: 'window' });
  });

  test('should return undefined if no client found', async () => {
    client.frameType = 'nested';
    activeClientIds.delete('1');
    const result = await resolveMainClient(event);
    expect(result).toBeUndefined();
    expect(self.clients.matchAll).toHaveBeenCalledWith({ type: 'window' });
  });
});
