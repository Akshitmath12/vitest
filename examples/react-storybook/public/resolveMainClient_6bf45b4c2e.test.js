// Test generated by RoostGPT for test ReactStoryBook using AI Type Open AI and AI Model gpt-4

const { resolveMainClient } = require('./mockServiceWorker');

describe('resolveMainClient', () => {
  let mockClient, mockAllClients, mockEvent;

  beforeEach(() => {
    mockClient = {
      frameType: 'top-level',
    };
    mockAllClients = [
      {
        visibilityState: 'visible',
        id: 'client1',
      },
      {
        visibilityState: 'hidden',
        id: 'client2',
      },
      {
        visibilityState: 'visible',
        id: 'client3',
      },
    ];
    mockEvent = {
      clientId: 'client1',
    };
    global.self = {
      clients: {
        get: jest.fn().mockResolvedValue(mockClient),
        matchAll: jest.fn().mockResolvedValue(mockAllClients),
      },
    };
    global.activeClientIds = new Set(['client1', 'client3']);
  });

  test('should return the top-level client', async () => {
    const client = await resolveMainClient(mockEvent);
    expect(client).toBe(mockClient);
  });

  test('should return the visible client that registered the worker', async () => {
    mockClient.frameType = 'nested';
    const client = await resolveMainClient(mockEvent);
    expect(client).toEqual({
      visibilityState: 'visible',
      id: 'client1',
    });
  });

  test('should return undefined if no client matches the criteria', async () => {
    global.activeClientIds = new Set(['client4']);
    const client = await resolveMainClient(mockEvent);
    expect(client).toBeUndefined();
  });
});
