// Test generated by RoostGPT for test ReactStoryBook using AI Type Open AI and AI Model gpt-4

const { sendToClient } = require('./mockServiceWorker');

describe('sendToClient function', () => {
  let client;
  let message;
  let messageChannelSpy;

  beforeEach(() => {
    message = { text: 'Hello World' };
    client = {
      postMessage: jest.fn()
    };
    messageChannelSpy = jest.spyOn(global, 'MessageChannel');
    messageChannelSpy.mockImplementation(() => ({
      port1: {
        onmessage: null
      },
      port2: {}
    }));
  });

  afterEach(() => {
    messageChannelSpy.mockRestore();
  });

  test('should resolve with the correct data', async () => {
    const data = { text: 'Hello World' };
    messageChannelSpy.mockImplementation(() => ({
      port1: {
        onmessage: function(callback) {
          callback({ data });
        }
      },
      port2: {}
    }));

    const result = await sendToClient(client, message);
    expect(result).toEqual(data);
    expect(client.postMessage).toHaveBeenCalledWith(message, [{}]);
  });

  test('should reject with an error if the data contains an error', async () => {
    const error = new Error('Test error');
    messageChannelSpy.mockImplementation(() => ({
      port1: {
        onmessage: function(callback) {
          callback({ data: { error } });
        }
      },
      port2: {}
    }));

    await expect(sendToClient(client, message)).rejects.toThrow(error);
    expect(client.postMessage).toHaveBeenCalledWith(message, [{}]);
  });
});
